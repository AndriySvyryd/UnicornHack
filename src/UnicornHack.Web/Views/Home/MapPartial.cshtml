@model Player
@{
    var level = Model.Level;
    var characters = new char[level.Width, level.Height];
    var classes = new string[level.Width, level.Height];
    var i = 0;
    for (var y = 0; y < level.Height; y++)
    {
        for (var x = 0; x < level.Width; x++)
        {
            var feature = (MapFeature)level.Terrain[i];
            var symbol = ' ';
            var className = "inherit";
            switch (feature)
            {
                case MapFeature.Default:
                    break;
                case MapFeature.StoneFloor:
                    symbol = '·';
                    className = "mapFloor";
                    break;
                case MapFeature.RockFloor:
                    symbol = '█';
                    className = "mapCorridor";
                    break;
                case MapFeature.StoneWall:
                    var neighbours = (DirectionFlags)level.WallNeighbours[i] & DirectionFlags.Cross;
                    switch (neighbours)
                    {
                        case DirectionFlags.None:
                            symbol = '●';
                            break;
                        case DirectionFlags.North:
                            symbol = '╹';
                            break;
                        case DirectionFlags.East:
                            symbol = '╺';
                            break;
                        case DirectionFlags.NorthAndEast:
                            symbol = '┗';
                            break;
                        case DirectionFlags.South:
                            symbol = '╻';
                            break;
                        case DirectionFlags.Longitudinal:
                            symbol = '┃';
                            break;
                        case DirectionFlags.SouthAndEast:
                            symbol = '┏';
                            break;
                        case DirectionFlags.NorthEastSouth:
                            symbol = '┣';
                            break;
                        case DirectionFlags.West:
                            symbol = '╸';
                            break;
                        case DirectionFlags.NorthAndWest:
                            symbol = '┛';
                            break;
                        case DirectionFlags.Latitudinal:
                            symbol = '━';
                            break;
                        case DirectionFlags.NorthEastWest:
                            symbol = '┻';
                            break;
                        case DirectionFlags.SouthAndWest:
                            symbol = '┓';
                            break;
                        case DirectionFlags.NorthWestSouth:
                            symbol = '┫';
                            break;
                        case DirectionFlags.SouthEastWest:
                            symbol = '┳';
                            break;
                        case DirectionFlags.Cross:
                            symbol = '╋';
                            break;
                        default:
                            throw new InvalidOperationException("Invalid wall neighbours: " + neighbours);
                    }
                    className = "mapWall";
                    break;
                case MapFeature.StoneArchway:
                    symbol = '∩';
                    className = "mapArchway";
                    break;
                case MapFeature.Pool:
                    symbol = '≈';
                    className = "mapPool";
                    break;
                default:
                    throw new NotSupportedException($"Map feature {feature} not supported.");
            }
            var vis1 = level.VisibleTerrain[i];
            var visibility = vis1 >> 5;
            switch (visibility)
            {
                case 7:
                    className = "lit7";
                    break;
                case 6:
                    className = "lit6";
                    break;
                case 5:
                    className = "lit5";
                    break;
                case 4:
                    className = "lit4";
                    break;
                case 3:
                    className = "lit3";
                    break;
                case 2:
                    className = "lit2";
                    break;
                case 1:
                    className = "lit1";
                    break;
                default:
                    className = "unlit";
                    break;
            }

            i++;
            characters[x, y] = symbol;
            classes[x, y] = className;
        }
    }
    foreach (var stairs in level.Connections)
    {
        characters[stairs.LevelX, stairs.LevelY] = stairs.TargetLevelDepth > stairs.LevelDepth ? '>' : '<';
        classes[stairs.LevelX, stairs.LevelY] = "featureStairs";
    }
    foreach (var item in level.Items)
    {
        var symbol = ' ';
    var className = "inherit";
        switch (item.Type & ~ItemType.Intricate & ~ItemType.Exotic)
        {
            case ItemType.Coin:
                symbol = '$';
                className = "itemGold";
                break;
            case ItemType.Shield:
            case ItemType.ArmorBack:
            case ItemType.ArmorBody:
            case ItemType.ArmorFeet:
            case ItemType.ArmorHands:
            case ItemType.ArmorHead:
                symbol = '(';
                className = "itemArmor";
                break;
            case ItemType.WeaponMeleeFist:
            case ItemType.WeaponMeleeShort:
            case ItemType.WeaponMeleeMedium:
            case ItemType.WeaponMeleeLong:
            case ItemType.WeaponMagicFocus:
            case ItemType.WeaponMagicStaff:
            case ItemType.WeaponRangedBow:
            case ItemType.WeaponRangedCrossbow:
            case ItemType.WeaponRangedSlingshot:
            case ItemType.WeaponRangedThrown:
            case ItemType.WeaponAmmoContainer:
                symbol = ')';
                className = "itemWeapon";
                break;
            case ItemType.Potion:
                symbol = '!';
                className = "itemPotion";
                break;
            default:
                throw new NotSupportedException($"Item type {item.Type} not supported.");
        }
        characters[item.LevelX.Value, item.LevelY.Value] = symbol;
        classes[item.LevelX.Value, item.LevelY.Value] = className;
    }
    foreach (var actor in level.Actors)
    {
        var symbol = ' ';
    var className = "inherit";
        switch (actor.BaseName)
        {
            case "player":
                symbol = '@';
                className = "playerCharacter";
                break;
            case "human":
                symbol = 'H';
                className = "monsterHuman";
                break;
            case "unicorn":
                symbol = 'U';
                className = "monsterUnicorn";
                break;
            case "lightning bug":
                symbol = 'b';
                className = "creatureLightningBug";
                break;
            case "firefly":
                symbol = 'B';
                className = "creatureFirefly";
                break;
            case "giant ant":
                symbol = 'a';
                className = "creatureGiantAnt";
                break;
            case "jaguar":
                symbol = 'j';
                className = "creatureJaguar";
                break;
            default:
                symbol = actor.BaseName[0];
                className = "creatureUnknown";
                break;
                // TODO: Add more creatures
                //throw new NotSupportedException($"Actor type {actor.BaseActor.Name} not supported.");
        }
        className += actor is Player ? " playerCharacter" : "";
        characters[actor.LevelX, actor.LevelY] = symbol;
        classes[actor.LevelX, actor.LevelY] = className;
    }
}

<pre class="map"><span>@{
    for (var y = 0; y < level.Height; y++)
    {
        for (var x = 0; x < level.Width; x++)
        {<span class="@classes[x, y]">@characters[x, y]</span>}@:
    }
}
</span></pre>