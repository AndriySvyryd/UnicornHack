@using System
@model Player

<pre class="map">
    <span class="mapSpan">@{
    var level = Model.Level;
    var characters = new char[level.Width, level.Height];
    var classes = new string[level.Width, level.Height];
    var i = 0;
    for (var y = 0; y < level.Height; y++)
    {
        for (var x = 0; x < level.Width; x++)
        {
            var feature = (MapFeature)level.Layout[i];
            var symbol = ' ';
            var className = "inherit";
            switch (feature)
            {
                case MapFeature.Default:
                    break;
                case MapFeature.Floor:
                    symbol = '·';
                    className = "mapFloor";
                    break;
                case MapFeature.Corridor:
                    symbol = '█';
                    className = "mapCorridor";
                    break;
                case MapFeature.Wall:
                    var neighbour = level.WallNeighbours[i] & 0xF;
                    switch (neighbour)
                    {
                        case 0:
                            symbol = '●';
                            break;
                        case 1:
                            symbol = '╹';
                            break;
                        case 2:
                            symbol = '╺';
                            break;
                        case 3:
                            symbol = '┗';
                            break;
                        case 4:
                            symbol = '╻';
                            break;
                        case 5:
                            symbol = '┃';
                            break;
                        case 6:
                            symbol = '┏';
                            break;
                        case 7:
                            symbol = '┣';
                            break;
                        case 8:
                            symbol = '╸';
                            break;
                        case 9:
                            symbol = '┛';
                            break;
                        case 10:
                            symbol = '━';
                            break;
                        case 11:
                            symbol = '┻';
                            break;
                        case 12:
                            symbol = '┓';
                            break;
                        case 13:
                            symbol = '┫';
                            break;
                        case 14:
                            symbol = '┳';
                            break;
                        case 15:
                            symbol = '╋';
                            break;
                        default:
                            throw new InvalidOperationException($"Invalid wall neighbours: {neighbour}");
                    }
                    className = "mapWall";
                    break;
                case MapFeature.Pool:
                    symbol = '≈';
                    className = "mapPool";
                    break;
                default:
                    throw new NotSupportedException($"Map feature {feature} not supported.");
            }
            i++;
            characters[x, y] = symbol;
            classes[x, y] = className;
        }
    }
    foreach (var upStairs in level.UpStairs)
    {
        characters[upStairs.DownLevelX, upStairs.DownLevelY] = '<';
        classes[upStairs.DownLevelX, upStairs.DownLevelY] = "featureUpStairs";
    }
    foreach (var downStairs in level.DownStairs)
    {
        characters[downStairs.UpLevelX, downStairs.UpLevelY] = '>';
        classes[downStairs.UpLevelX, downStairs.UpLevelY] = "featureDownStairs";
    }
    foreach (var item in level.Items)
    {
        var symbol = ' ';
        var className = "inherit";
        switch (item.Type)
        {
            case ItemType.Coin:
                symbol = '$';
                className = "itemGold";
                break;
            case ItemType.Food:
                symbol = '%';
                className = "itemFood";
                break;
            case ItemType.Armor:
                symbol = '[';
                className = "itemArmor";
                break;
            case ItemType.WeaponMeleeShort:
            case ItemType.WeaponMeleeMedium:
            case ItemType.WeaponMeleeLong:
            case ItemType.WeaponRangedBows:
            case ItemType.WeaponRangedCrossbows:
            case ItemType.WeaponRangedSlingshots:
            case ItemType.WeaponRangedThrown:
                symbol = ')';
                className = "itemWeapon";
                break;
            default:
                throw new NotSupportedException($"Item type {item.Type} not supported.");
        }
        characters[item.LevelX.Value, item.LevelY.Value] = symbol;
        classes[item.LevelX.Value, item.LevelY.Value] = className;
    }
    foreach (var actor in level.Actors)
    {
        var symbol = ' ';
        var className = "inherit";
        switch (actor.BaseActor.Name)
        {
            case "human":
                symbol = 'H';
                className = "monsterHuman";
                break;
            case "player human":
                symbol = '@';
                className = "monsterHuman playerCharacter";
                break;
            case "unicorn":
                symbol = 'U';
                className = "monsterUnicorn";
                break;
            case "lightning bug":
                symbol = 'b';
                className = "monsterBug";
                break;
            case "firefly":
                symbol = 'B';
                className = "monsterNastyBug";
                break;
            default:
                throw new NotSupportedException($"Actor type {actor.BaseActor.Name} not supported.");
        }
        className += (actor is Player ? " playerCharacter" : "");
        characters[actor.LevelX, actor.LevelY] = symbol;
        classes[actor.LevelX, actor.LevelY] = className;
    }
    for (var y = 0; y < level.Height; y++)
    {
        for (var x = 0; x < level.Width; x++)
        {<span class="mapGlyph @classes[x, y]">@characters[x, y]</span>}@:
    }
}
</span>
</pre>